"bundle";!function(){var a=System.amdDefine;a("api/api.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="api"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-table/tree/master/doc/src/api"><i class="fa fa-edit"></i> Improve documentation</a><h1>Api</h1></div><p>Though you can have access to many of the internals of the <code>aut-table</code> plugin through data binding, there are some instances when it is not enough. For those instances we are exposing an Api that will give you access to extra functionality.</p><p>To get a hold of the api you need to bind the <code>api</code> property, the <code>aut-table</code> will set its api into it. Right now the api contains:<ul><li><code>revealItem(item):boolean</code>: When pagination is enabled, this function will allow you to reveal the page where the provided <code>item</code> is.<br>You will get back a boolean, where <code>true</code> indicates the item was revealed correctly and <code>false</code> indicates one of three things:<ol><li>The provided item does not exist in the table.</li><li>The provided item exists but it is not visible because of a filter. On which case you can clear the filter and try again.</li><li>Pagination is not enabled.</li></ol></li></ul></p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;\n                                              api.bind: tableApi;"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Active</th></tr></thead><tbody><tr repeat.for="user of $displayData" aut-select="row.bind: user; selected-class: info"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.isActive}</td></tr></tbody></table><div class="row"><div class="col-md-9"><aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems"></aut-pagination></div><div class="col-md-3 text-right"><button class="btn btn-default" click.delegate="selectLast()">Select Last</button></div></div></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;\n                                              api.bind: tableApi;">\n            &lt;thead>\n            &lt;tr>\n                &lt;th>Name&lt;/th>\n                &lt;th>Age&lt;/th>\n                &lt;th>E-mail&lt;/th>\n                &lt;th>Active&lt;/th>\n            &lt;/tr>\n            &lt;/thead>\n            &lt;tbody>\n            &lt;tr repeat.for="user of $displayData" aut-select="row.bind: user; selected-class: info">\n                &lt;td>${open}user.name}&lt;/td>\n                &lt;td>${open}user.age}&lt;/td>\n                &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n                &lt;td>${open}user.isActive}&lt;/td>\n            &lt;/tr>\n            &lt;/tbody>\n        &lt;/table>\n\n        &lt;div class="row">\n            &lt;div class="col-md-9">\n                &lt;aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems">&lt;/aut-pagination>\n            &lt;/div>\n\n            &lt;div class="col-md-3 text-right">\n                &lt;button class="btn btn-default" click.delegate="selectLast()">Select Last&lt;/button>\n            &lt;/div>\n        &lt;/div>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    pageSize = 10;\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    selectLast(){\n        let last = this.users[this.users.length - 1];\n        last.$isSelected = true;\n        this.tableApi.revealItem(last);\n    }\n}</code></pre></aubs-tab></aubs-tabset></template>'})}(),System.register("api/api.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("ApiCustomElement",e=function(){function a(){c(this,a),this.open="${",this.users=[],this.pageSize=10}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b})},a.prototype.selectLast=function(){var a=this.users[this.users.length-1];a.$isSelected=!0,this.tableApi.revealItem(a)},a}()),a("ApiCustomElement",e)}}}),function(){var a=System.amdDefine;a("app.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><require from="nav-bar.html"></require><require from="bootstrap/css/bootstrap.css"></require><require from="./introduction/introduction"></require><require from="./basics/basics"></require><require from="./filter/filter"></require><require from="./sort/sort"></require><require from="./pagination/pagination"></require><require from="./selection/selection"></require><require from="./api/api"></require><nav-bar></nav-bar><div class="page-host"><introduction></introduction><div class="container"><basics></basics><filter></filter><sort></sort><pagination></pagination><selection></selection><api></api><div class="text-center"><hr><p>Hector Romero, 2016 under the MIT License</p></div></div></div></template>'})}(),System.register("app.js",["jquery"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a["default"]}],execute:function(){a("App",e=function(){function a(){c(this,a)}return a.prototype.attached=function(){var a=window.location.hash;a&&setTimeout(function(){d(".page-host").animate({scrollTop:d(a).offset().top-70})},500)},a}()),a("App",e)}}}),function(){var a=System.amdDefine;a("basics/basics.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="basics"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-table/tree/master/doc/src/basics"><i class="fa fa-edit"></i> Improve documentation</a><h1>The Basics</h1></div><p>One of the goals for Aurelia Table is for it to be easy to use. Because of this we start with the normal html table markup and then we build on top of it. This will allow you to easily customize your tables with CSS. For this examples we have chosen to use Bootstrap and Font Awesome but you can use whatever your heart desires.</p><p>Here is the code for the simplest table you can create:</p><aubs-tabset><aubs-tab header="Preview"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Address</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.address.street + \', \' + user.address.city}</td></tr></tbody></table></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Address&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.address.street + \', \' + user.address.city}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></aubs-tab></aubs-tabset><p>The <code>aurelia-table</code> custom attribute takes in a list of bindable properties:<ul><li><code>data</code>: You need to bind this to the array in your view-model that holds the original data for your table. Aurelia Table will observe this array for changes, so you can load your data asynchronously and the table will update itself when the data becomes available.</li><li><code>display-data</code>: Aurelia Table will make a copy of the array provided in the <code>data</code> property and will set into this property. The property you are binding here doesn\'t need to be declared or initialized in your view-model, just make sure you provide a unique property name that is not used anywhere else outside the table.</li></ul>The other noteworthy code is the repeater: <code>repeat.for="user of $displayData"</code>. You want to repeat over whatever property you used for the <code>display-data</code> property; in this case it was <code>$displayData</code>.</p><p>All right, this is the simplest table you can create, but right now Aurelia Table is effectively doing nothing. Keep reading to discover how easy it is to add functionality with plugins.</p></template>'})}(),System.register("basics/basics.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("BasicsCustomElement",e=function(){function a(){c(this,a),this.open="${",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a}()),a("BasicsCustomElement",e)}}}),function(){var a=System.amdDefine;a("filter/custom-filter.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><h2>Custom Filters</h2><p>You also have the option to provide a custom filter for more complex situations. A custom filter will look like this:</p><pre><code class="language-js" au-syntax>filters = [\n    {value: \'\', custom: this.customFilter}\n];\n\ncustomFilter(filterValue, row){\n ...\n}</code></pre><p>As before you provide a <code>value</code> field, but you also provide a <code>custom</code> function. This function receives the <code>filterValue</code> as the first argument and the <code>row</code> as second argument; your function must return <code>true</code> if the row should be included in the results or <code>false</code> otherwise.</p><p>Note that you can use both a <code>custom</code> function and the normal <code>keys</code> in the same filter.</p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><br><div class="checkbox"><label><input type="checkbox" checked.bind="filters[0].value"> Show inactive</label></div><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData; filters.bind: filters"><thead><tr><th>Name</th><th>State</th><th>E-mail</th><th>Active</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.address.state}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.isActive}</td></tr></tbody></table></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;div class="checkbox">\n    &lt;label>\n        &lt;input type="checkbox" checked.bind="filters[0].value">\n        Show inactive\n    &lt;/label>\n&lt;/div>\n\n&lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData; filters.bind: filters">\n    &lt;thead>\n    &lt;tr>\n        &lt;th>Name&lt;/th>\n        &lt;th>State&lt;/th>\n        &lt;th>E-mail&lt;/th>\n        &lt;th>Active&lt;/th>\n    &lt;/tr>\n    &lt;/thead>\n    &lt;tbody>\n    &lt;tr repeat.for="user of $displayData">\n        &lt;td>${open}user.name}&lt;/td>\n        &lt;td>${open}user.address.state}&lt;/td>\n        &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n        &lt;td>${open}user.isActive}&lt;/td>\n    &lt;/tr>\n    &lt;/tbody>\n&lt;/table></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    filters = [\n        {value: true, custom: this.inactiveFilter}\n    ];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    inactiveFilter(filterValue, row) {\n        return filterValue || row.isActive;\n    }\n}</code></pre></aubs-tab></aubs-tabset></template>'})}(),System.register("filter/custom-filter.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("CustomFilterCustomElement",e=function(){function a(){c(this,a),this.open="${",this.users=[],this.filters=[{value:!0,custom:this.inactiveFilter}]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a.prototype.inactiveFilter=function(a,b){return a||b.isActive},a}()),a("CustomFilterCustomElement",e)}}}),function(){var a=System.amdDefine;a("filter/filter.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><require from="./custom-filter"></require><div class="page-header" id="filter"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-table/tree/master/doc/src/filter"><i class="fa fa-edit"></i> Improve documentation</a><h1>Filter Data</h1></div><p>The Filter Plugin has been updated to allow multiple filters at the same time. The <code>filter-text</code> and <code>filter-keys</code> properties <strong>have been replaced</strong> by a <code>filters</code> property.</p><p>The new <code>filters</code> property expects an array of objects as the following:</p><pre><code class="language-js" au-syntax>filters = [\n    {value: \'\', keys: [\'name\', \'address.state\']},\n    {value: \'\', keys: [\'eyeColor\']},\n];</code></pre><p>The <code>value</code> property represents the filter value, normally you would bind it to a text input or a select, but you can handle it anyway you want. You can also set a default value for it and your data will be filtered on load.</p><p>The <code>keys</code> property is an array if the fields you want to filter by. Aurelia Table will filter your data matching the <code>value</code> with the <code>keys</code> you provide.</p><p>Note how you can use nested paths such as <code>address.state</code> for your key values.</p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><br><div class="form-group"><input type="text" value.bind="filters[0].value" placeholder="Enter filter text" class="form-control"></div><div class="form-group"><label for="eyeColor">Eye Color</label><select id="eyeColor" class="form-control" value.bind="filters[1].value"><option repeat.for="color of eyeColors" model.bind="color">${color}</option></select></div><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData; filters.bind: filters"><thead><tr><th>Name</th><th>State</th><th>E-mail</th><th>Eye Color</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.address.state}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.eyeColor}</td></tr></tbody></table></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;div class="form-group">\n    &lt;input type="text" value.bind="filters[0].value" placeholder="Enter filter text" class="form-control"/>\n&lt;/div>\n\n&lt;div class="form-group">\n    &lt;label for="eyeColor">Eye Color &lt;/label>\n    &lt;select id="eyeColor" class="form-control" value.bind="filters[1].value">\n        &lt;option repeat.for="color of eyeColors" model.bind="color">${open}color}&lt;/option>\n    &lt;/select>\n&lt;/div>\n\n&lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData; filters.bind: filters">\n    &lt;thead>\n    &lt;tr>\n        &lt;th>Name&lt;/th>\n        &lt;th>State&lt;/th>\n        &lt;th>E-mail&lt;/th>\n        &lt;th>Eye Color&lt;/th>\n    &lt;/tr>\n    &lt;/thead>\n    &lt;tbody>\n    &lt;tr repeat.for="user of $displayData">\n        &lt;td>${open}user.name}&lt;/td>\n        &lt;td>${open}user.address.state}&lt;/td>\n        &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n        &lt;td>${open}user.eyeColor}&lt;/td>\n    &lt;/tr>\n    &lt;/tbody>\n&lt;/table></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n    eyeColors = [];\n\n    filters = [\n        {value: \'\', keys: [\'name\', \'address.state\']},\n        {value: \'\', keys: [\'eyeColor\']},\n    ];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n            .then(() => this.populateColors())\n    }\n\n    populateColors(){\n        this.eyeColors.push(\'\');\n        for(let next of this.users){\n            let nextColor = next.eyeColor;\n\n            if(this.eyeColors.indexOf(nextColor) === -1){\n                this.eyeColors.push(nextColor);\n            }\n        }\n    }\n}</code></pre></aubs-tab></aubs-tabset><p>Note how the text input is binding to the filter value with: <code>value.bind="filters[0].value"</code>. And the Select is doing the same thing: <code>value.bind="filters[1].value"</code>. With this approach you can add many filters very easily, just make sure you keep track of the filters index.</p><custom-filter></custom-filter></template>'})}(),System.register("filter/filter.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("FilterCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="preview",this.users=[],this.eyeColors=[],this.filters=[{value:"",keys:["name","address.state"]},{value:"",keys:["eyeColor"]}]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)}).then(function(){return a.populateColors()})},a.prototype.populateColors=function(){this.eyeColors.push("");for(var a=this.users,b=Array.isArray(a),c=0,a=b?a:a[Symbol.iterator]();;){var d;if(b){if(c>=a.length)break;d=a[c++]}else{if(c=a.next(),c.done)break;d=c.value}var e=d,f=e.eyeColor;this.eyeColors.indexOf(f)===-1&&this.eyeColors.push(f)}},a}()),a("FilterCustomElement",e)}}}),function(){var a=System.amdDefine;a("introduction/introduction.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-banner"><h1 class="project-name">Aurelia Table</h1><h2 class="project-tagline">Simple functional data table</h2><a href="https://github.com/tochoromero/aurelia-table" class="btn">View on GitHub</a> <a href="https://github.com/tochoromero/aurelia-table/zipball/master" class="btn">Download .zip</a> <a href="https://github.com/tochoromero/aurelia-table/tarball/master" class="btn">Download .tar.gz</a></div><div class="container"><div class="row" id="introduction"><div class="col-md-12"><div class="page-header"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-table/tree/master/doc/src/introduction"><i class="fa fa-edit"></i> Improve documentation</a><h1>Introduction</h1></div><p>Aurelia Table was created out of the need for a simple highly customizable data table plugin that could take advantage of Aurelia\'s data binding. It has no dependencies but Aurelia itself and because it uses the standard HTML table it is compatible with CSS Frameworks such as Bootstrap and Foundation.</p><p>Out of the box you will get plugins for row searching, column sorting, client side pagination and row selection. But if you require very complex tables, high performance with big volumes of data or you don\'t care about data binding you may want to take a look at <a href="https://www.ag-grid.com/">Ag-Grid</a>, it has a web component mode that can be used with Aurelia.</p><p>Also a big shout to the team behind <a href="http://lorenzofox3.github.io/smart-table-website/" target="_blank">Smart-Table</a>, Aurelia Table was inspired by this library. If you are ever in need for a good table library for Angular please take a look at this library.</p><div class="page-header" id="installation"><h1>Installation</h1></div><h2>JSPM Installation</h2><p>You can install the plugin directly from its Github repository with jspm:<pre>jspm install aurelia-table -y</pre></p><p>Once the plugin is installed we need to indicate Aurelia to use it. To do this find your <code>main.js</code> file and add the plugin:<pre><code class="language-js" au-syntax>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(\'aurelia-table\');\n\n  aurelia.start().then(() => aurelia.setRoot());\n}</code></pre></p><h2>Aurelia CLI installation</h2><p>First you need to install the plugin with npm:<pre>npm install au-table --save</pre></p><p>Now we need to indicate Aurelia CLI how to load the plugin. Add the following in your <code>aurelia.json</code> project file:<pre><code class="language-js" au-syntax>{\n  "name": "aurelia-table",\n  "path": "../node_modules/au-table/dist/amd",\n  "main": "index",\n  "resources": [\n    "au-table-pagination.html"\n  ]\n}</code></pre></p><p>Finally we need to indicate Aurelia to use the plugin. Find your <code>main.js</code> file and add the following:<pre><code class="language-js" au-syntax>export function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(\'aurelia-table\')\n    .feature(\'resources\');\n\n  aurelia.start().then(() => aurelia.setRoot());\n}</code></pre></p><h2>NPM Package</h2><p>A NPM package for the Aurelia Table has been created. Unfortunately the aurelia-table name was already taken, so I had to settle with <code>au-table</code> instead.</p><p>If you choose to use the NPM package with JSPM, you need to be aware of the naming differences when setting up the plugin.</p></div></div></div></template>'})}(),System.register("introduction/introduction.js",[],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d;return{setters:[],execute:function(){a("IntroductionCustomElement",d=function b(){c(this,b)}),a("IntroductionCustomElement",d)}}}),System.register("main.js",["fetch"],function(a,b){"use strict";function c(a){a.use.standardConfiguration().developmentLogging().plugin("aurelia-syntax-highlighter").plugin("aurelia-table").plugin("aurelia-bootstrap"),a.start().then(function(){return a.setRoot()})}return a("configure",c),{setters:[function(a){}],execute:function(){}}}),function(){var a=System.amdDefine;a("nav-bar.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template bindable="router"><nav class="navbar navbar-default navbar-fixed-top" role="navigation"><div class="navbar-header"><a class="navbar-brand" href="#"><span>Aurelia Table</span></a></div><ul class="nav navbar-nav"><li><a href="#introduction">Introduction</a></li><li><a href="#installation">Installation</a></li><li><a href="#basics">The Basics</a></li><li><a href="#filter">Filter Data</a></li><li><a href="#sort">Sorting</a></li><li><a href="#pagination">Pagination</a></li><li><a href="#selection">Selection</a></li><li><a href="#api">Api</a></li></ul></nav></template>'})}(),function(){var a=System.amdDefine;a("pagination/customPagination.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><h2 id="custom-pagination">Custom Pagination</h2><p>If you don\'t want a dependency in Bootstrap or you simply want a different layout for the pagination, you can replace the <code>aut-pagination</code> template with your own. This is achieved through Aurelia\'s <code>replace-part</code> capabilities. Of course you can always forget about the <code>aut-pagination</code> component all together and write your own, but we provide you a couple of properties and methods aditional to the properties you already provide:<ul><li><code>totalPages</code>: Specify the total number of pages. This property is calculated out of the <code>total-items</code> and <code>page-size</code> properties. And it will updated any time any of them changes.</li><li><code>displayPages</code>: When you choose to limit the number of visible page links, this array will contain every page link that is currently visible. The array contain objects with two properties: <code>title</code> Wish is the text of the link, and <code>value</code> wish is the page number the link will take you to.</li><li><code>selectPage(page)</code>: This function will select the page number you provide. You want to call this when your user select one page in your paginator.</li><li><code>nextPage()</code>: This function will select the next page if available.</li><li><code>previousPage()</code>: This function will select the previous page if available.</li><li><code>firstPage()</code>: This function will select the first page.</li><li><code>LastPage()</code>: This function will select the last page.</li></ul></p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Active</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.isActive}</td></tr></tbody></table><div class="row"><aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems" pagination-size.bind="5"><template replace-part="pagination"><ul class="custom-pagination" hide.bind="hideSinglePage && totalPages === 1"><li><a aria-label="Previous" click.delegate="previousPage()" class-name.bind="currentPage === 1 ? \'disabled\' : \'\'"><span aria-hidden="true">&laquo;</span></a></li><li repeat.for="page of displayPages"><a click.delegate="selectPage(page.value)" class-name.bind="currentPage === page.value ? \'active\' : \'\'">${page.title}</a></li><li><a aria-label="Next" click.delegate="nextPage()" class-name.bind="currentPage === totalPages ? \'disabled\' : \'\'"><span aria-hidden="true">&raquo;</span></a></li></ul></template></aut-pagination></div></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Active&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.isActive}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n\n    &lt;aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems">\n        &lt;template replace-part="pagination">\n            &lt;ul class="custom-pagination" hide.bind="hideSinglePage && totalPages === 1">\n                &lt;li>\n                    &lt;a aria-label="Previous" click.delegate="previousPage()"\n                       class-name.bind="currentPage === 1 ? \'disabled\' : \'\'">\n                        &lt;span aria-hidden="true">&laquo;&lt;/span>\n                    &lt;/a>\n                &lt;/li>\n\n                &lt;li repeat.for="page of displayPages">\n                    &lt;a click.delegate="selectPage(page.value)" class-name.bind="currentPage === page.value ? \'active\' : \'\'">\n                        ${open}page.title}\n                    &lt;/a>\n                &lt;/li>\n\n                &lt;li>\n                    &lt;a aria-label="Next" click.delegate="nextPage()"\n                       class-name.bind="currentPage === totalPages ? \'disabled\' : \'\'">\n                        &lt;span aria-hidden="true">&raquo;&lt;/span>\n                    &lt;/a>\n                &lt;/li>\n            &lt;/ul>\n        &lt;/template>\n    &lt;/aut-pagination>\n\n&lt;/template></code></pre></aubs-tab><aubs-tab header="CSS"><pre><code class="language-css" au-syntax>.ul.custom-pagination {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\nul.custom-pagination li {display: inline;}\n\nul.custom-pagination li a {\n  color: black;\n  float: left;\n  padding: 8px 16px;\n  text-decoration: none;\n  transition: background-color .3s;\n}\n\nul.custom-pagination li a.active {\n  background-color: #4CAF50;\n  color: white;\n}\n\nul.custom-pagination li a:hover:not(.active):not(.disabled) {background-color: #ddd;}\n\nul.custom-pagination li a.disabled {\n  color: darkgrey;\n}</code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    pageSize = 10;\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></aubs-tab></aubs-tabset></template>'})}(),System.register("pagination/customPagination.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("CustomPaginationCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[],this.pageSize=10}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b})},a}()),a("CustomPaginationCustomElement",e)}}}),function(){var a=System.amdDefine;a("pagination/pagination.html!github:systemjs/plugin-text@0.0.8.js",[],function(){
return'<template><require from="./customPagination"></require><div class="page-header" id="pagination"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-table/tree/master/doc/src/pagination"><i class="fa fa-edit"></i> Improve documentation</a><h1>Pagination</h1></div><p>Aurelia Table supports client side pagination. It is very easy to enable pagination, there are 3 properties you need to provide:<ul><li><code>current-page</code>: This property specifies the page that is currently active, the index starts at 1.</li><li><code>page-size</code>: This property specifies how many items you want to display on each page.</li><li><code>total-items</code>: This property specifies the total number of items in the table.</li></ul>There is also a <code>hide-single-page</code> property. This property is <code>true</code> by default and it will hide the Pagination Component when there is only a single page. And of course you can bind this to <code>false</code> to disable the behavior.</p><p>Of the 3 properties <code>current-page</code> and <code>page-size</code> need to be manually managed outside of Aurelia Table. <code>total-items</code> will be managed by Aurelia Table based on the <code>data</code> property and any filters we may have.</p><p>As mentioned there are some properties you need to manually manage, but don\'t worry, we provide a Pagination Component that will allow you to have pagination out of the box</p><h3>Pagination Component</h3><p>The <code>aut-pagination</code> component provides a simple pagination control that will allow you to navigate the table pages. For this component you also need to provide the same 3 properties you used for the Aurelia Table: <code>current-page</code>, <code>page-size</code> and <code>total-items</code>.</p><p>Additionally there are some extra configurations for the pagination:</p><ul><li><code>hide-single-page</code>: Boolean that determines whether or not we show hide the pagination when there is only one single page. This is <code>true</code> by default.</li><li><code>pagination-size</code>: You can specify the number of visible page links for the pagination. By default we will show every single page link.<br>When you provide a number, the visible links will adhere to it and we will add controls to navigate into the invisible links.</li><li><code>boundary-links</code>: Boolean that determines whether or not we should two links to navigate to the First and Last page. This is <code>false</code> by default.</li><li><code>first-text</code>: You can specify the text for the First Page link. By default it is \'First\'.</li><li><code>last-text</code>: You can specify the text for the Last Page link. By default it is \'Last\'.</li><li><code>direction-links</code>: Booleans that determines whether or not we should have direction links to navigate back and forth between pages. By default this is <code>true</code>.</li><li><code>previous-text</code>: You can specify the text for the Previous Page link. By default it is \'&lt;\'.</li><li><code>next-text</code>: You can specify the text for the Next Page link. By default it is \'&gt;\'.</li></ul><p class="bg-info padding">The Pagination Component requires Bootstrap for its layout. If you don\'t want to have a dependency in Bootstrap you can provide your own template. Check the <a href="#custom-pagination">Custom Pagination</a> section for details.</p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Active</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.isActive}</td></tr></tbody></table><div class="row"><div class="col-md-9"><aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems" pagination-size.bind="5" boundary-links.bind="true"></aut-pagination></div><div class="col-md-3"><div class="form-inline"><div class="form-group pull-right"><label for="pageSize">Page Size:</label><select value.bind="pageSize" id="pageSize" class="form-control"><option model.bind="5">5</option><option model.bind="10">10</option><option model.bind="20">20</option><option model.bind="50">50</option></select></div></div></div></div></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData;\n                                              current-page.bind: currentPage; page-size.bind: pageSize; total-items.bind: totalItems;">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Active&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.isActive}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n\n    &lt;div class="row">\n        &lt;div class="col-md-9">\n            &lt;aut-pagination current-page.bind="currentPage" page-size.bind="pageSize" total-items.bind="totalItems"\n                                   pagination-size.bind="5" boundary-links.bind="true"> &lt;/aut-pagination>\n        &lt;/div>\n\n        &lt;div class="col-md-3">\n            &lt;div class="form-inline">\n                &lt;div class="form-group pull-right">\n                    &lt;label for="pageSize">Page Size: &lt;/label>\n                    &lt;select value.bind="pageSize" id="pageSize" class="form-control">\n                        &lt;option model.bind="5">5&lt;/option>\n                        &lt;option model.bind="10">10&lt;/option>\n                        &lt;option model.bind="20">20&lt;/option>\n                        &lt;option model.bind="50">50&lt;/option>\n                    &lt;/select>\n                &lt;/div>\n            &lt;/div>\n        &lt;/div>\n    &lt;/div>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    pageSize = 10;\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n}</code></pre></aubs-tab></aubs-tabset><p>Don\'t get scared by the long markup, a big part of it is just Bootstrap layout. Note how the <code>aut-pagination</code> controller is binding the same properties we are setting into the <code>aurelia-table</code> custom attribute. We are also adding a standard dropdown to control the page size.</p><custom-pagination></custom-pagination></template>'})}(),System.register("pagination/pagination.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("PaginationCustomElement",e=function(){function a(){c(this,a),this.open="${",this.selected="html",this.users=[],this.pageSize=5}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b})},a}()),a("PaginationCustomElement",e)}}}),function(){var a=System.amdDefine;a("selection/custom-selection.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><h2>Custom Selection</h2><p>By default, a row gets selected when the user clicks on it. Sometimes this is not desired behaviour, and instead you may want to use a checkbox or a button. For those instances you can enable custom selection.</p><p>To enable custom selection set the <code>custom</code> property to <code>true</code>. After that, Aurelia Table will not listen for click events in the rows; instead it is your responsibility to update the <code>$isSelected</code> property in the rows.</p><p>Aurelia Table will still trigger the selected events, handle the row class and respect the selection mode (single, multiple).</p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th></th><th>Name</th><th>Age</th><th>E-mail</th><th>Active</th></tr></thead><tbody><tr repeat.for="user of $displayData" aut-select="row.bind: user; custom.bind: true; mode: multiple;selected-class: info" select.delegate="rowSelected($event)"><td><input type="checkbox" checked.bind="user.$isSelected"></td><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.isActive}</td></tr></tbody></table></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>&lt;/th>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Active&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData" aut-select="row.bind: user; custom.bind: true; mode: multiple; selected-class: info"\n                select.delegate="rowSelected($event)">\n            &lt;td>&lt;input type="checkbox" checked.bind="user.$isSelected"/>&lt;/td>\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.isActive}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    rowSelected($event){\n        console.log($event.detail.row);\n    }\n}</code></pre></aubs-tab></aubs-tabset></template>'})}(),System.register("selection/custom-selection.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("CustomSelectionCustomElement",e=function(){function a(){c(this,a),this.open="${",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a.prototype.rowSelected=function(a){console.log(a.detail.row)},a}()),a("CustomSelectionCustomElement",e)}}}),function(){var a=System.amdDefine;a("selection/selection.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><require from="./custom-selection"></require><div class="page-header" id="selection"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-table/tree/master/doc/src/selection"><i class="fa fa-edit"></i> Improve documentation</a><h1>Row Selection</h1></div><p>The <code>aut-select</code> attribute, when added to the rows will make them selectable. Its properties are:<ul><li><code>row</code>: You need to bind the current row in your table repeat. This is the only required property.</li><li><code>mode</code>: This is the selection mode. If you don\'t provide it is \'single\' by default, you can also set it to multiple.</li><li><code>selected-class</code>: Specifies the css class for the selected rows. By default this is <code>aut-row-selected</code></li></ul></p><p class="bg-info padding">When you select a row, the property <code>$isSelected</code> is set to true in the row object.</p><p>There is also a <code>select</code> custom event that is triggered in the <code>tr</code> element when it gets selected. You can listen for this event if you need to perform an action when a row is selected</p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th>Name</th><th>Age</th><th>E-mail</th><th>Active</th></tr></thead><tbody><tr repeat.for="user of $displayData" aut-select="row.bind: user; mode: multiple;selected-class: info" select.delegate="rowSelected($event)"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.isActive}</td></tr></tbody></table></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th>Name&lt;/th>\n            &lt;th>Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th>Active&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData" aut-select="row.bind: user; mode: multiple; selected-class: info"\n                select.delegate="rowSelected($event)">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.isActive}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    rowSelected($event){\n        console.log($event.detail.row);\n    }\n}</code></pre></aubs-tab></aubs-tabset><custom-selection></custom-selection></template>'})}(),System.register("selection/selection.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("SelectionCustomElement",e=function(){function a(){c(this,a),this.open="${",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a.prototype.rowSelected=function(a){console.log(a.detail.row)},a}()),a("SelectionCustomElement",e)}}}),function(){var a=System.amdDefine;a("sort/sort.html!github:systemjs/plugin-text@0.0.8.js",[],function(){return'<template><div class="page-header" id="sort"><a class="btn btn-default pull-right" target="_blank" href="https://github.com/tochoromero/aurelia-table/tree/master/doc/src/sort"><i class="fa fa-edit"></i> Improve documentation</a><h1>Column Sorting</h1></div><p>The <code>aut-sort</code> attribute when added to a <code>th</code> element, enables sorting for that column. There are 3 properties:<ul><li><code>key</code>: This is just a string with the name of the column it will sort by, you will want to match this to the actual column you are adding it to.</li><li><code>custom</code>: In some cases you need more control over sorting, for instance if you have a complex object or your sorting depends in two or more values. For those cases you can use this property to provide a custom sorting function.<br>Your function will receive the 2 rows being compared and a third parameter with the sort order where <code>1</code> represents ascending and <code>-1</code> represents descending.</li><li><code>default</code>: You should provide this for the one column you want to be sorted by default. The possible values are: <code>asc</code> for ascending ordering and <code>desc</code> for descending order.</li></ul></p><p>There is also the option to use a getter function in the <code>key</code> property. When using a function it will be called once per each row and it will receive the row object, it then should return the value to sort by. A common example of this would be a function that returns the length of one property, so then the column will be sorted by length.</p><p></p><p>The</p><h3>Styling</h3><p>There are 4 CSS classes for <code>th</code> elements with sorting enabled:<ul><li><code>aut-sort</code>: This class is always present, its purpose is to provide a constant CSS class for the columns with sorting.</li><li><code>aut-sortable</code>: This class indicates the column can be sorted and it is present when the column is not currently sorted.</li><li><code>aut-asc</code>: This class indicates the column is being sorted by an ascending order.</li><li><code>aut-desc</code>: This class indicates the column is being sorted by a descending order.</li></ul></p><p>You will need to provide the styles for this classes. In this example we are leveraging Font Awesome to show the appropriate icons.</p><h3>Example</h3><aubs-tabset><aubs-tab header="Preview"><table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData"><thead><tr><th aut-sort="key.bind: nameLength">Name</th><th aut-sort="key: age; default: desc">Age</th><th>E-mail</th><th aut-sort="custom.bind: dateSort">Registered</th><th aut-sort="key: isActive">Active</th></tr></thead><tbody><tr repeat.for="user of $displayData"><td>${user.name}</td><td>${user.age}</td><td><a href="mailto:${user.email}">${user.email}</a></td><td>${user.registered}</td><td>${user.isActive}</td></tr></tbody></table></aubs-tab><aubs-tab header="HTML"><pre><code class="language-markup" au-syntax>&lt;template>\n    &lt;table class="table table-striped" aurelia-table="data.bind: users; display-data.bind: $displayData">\n        &lt;thead>\n        &lt;tr>\n            &lt;th aut-sort="key.bind: nameLength">Name&lt;/th>\n            &lt;th aut-sort="key: age; default: desc">Age&lt;/th>\n            &lt;th>E-mail&lt;/th>\n            &lt;th aut-sort="custom.bind: dateSort">Registered&lt;/th>\n            &lt;th aut-sort="key: isActive">Active&lt;/th>\n        &lt;/tr>\n        &lt;/thead>\n        &lt;tbody>\n        &lt;tr repeat.for="user of $displayData">\n            &lt;td>${open}user.name}&lt;/td>\n            &lt;td>${open}user.age}&lt;/td>\n            &lt;td>&lt;a href="mailto:${open}user.email}">${open}user.email}&lt;/a>&lt;/td>\n            &lt;td>${open}user.registered}&lt;/td>\n            &lt;td>${open}user.isActive}&lt;/td>\n        &lt;/tr>\n        &lt;/tbody>\n    &lt;/table>\n&lt;/template></code></pre></aubs-tab><aubs-tab header="CSS"><pre><code class="language-css" au-syntax>.aut-sort:before{\n    font-family: FontAwesome;\n    padding-right: 0.5em;\n    width: 1.28571429em;\n    display: inline-block;\n    text-align: center;\n}\n\n.aut-sortable:before{\n    content: "\\f0dc";\n}\n\n.aut-asc:before{\n    content: "\\f160";\n}\n\n.aut-desc:before{\n    content: "\\f161";\n}</code></pre></aubs-tab><aubs-tab header="JS"><pre><code class="language-js" au-syntax>import {HttpClient} from "aurelia-fetch-client";\n\nexport class Example {\n    users = [];\n\n    bind(){\n        let client = new HttpClient();\n\n        return client.fetch(\'data.json\')\n            .then(response => response.json())\n            .then(users => this.users = users);\n    }\n\n    nameLength(row) {\n        return row.name.length;\n    }\n\n    dateSort(a, b, sortOrder) {\n        let date1 = new Date(a.registered);\n        let date2 = new Date(b.registered);\n\n        if (date1 === date2) {\n            return 0;\n        }\n\n        if (date1 > date2) {\n            return 1 * sortOrder;\n        }\n\n        return -1 * sortOrder;\n    }\n}</code></pre></aubs-tab></aubs-tabset><p>Note how the name column is being sorted by its length: <code>aut-sort="key.bind: nameLength"</code>. You can see the simple <code>nameLength</code> function in the JS tab.<br>Also note the Registered column is using the <code>custom</code> property to provide a custom sort function: <code>aut-sort="custom.bind: dateSort"</code>. You can see the <code>dateSort</code> function in the JS tab.</p></template>'})}(),System.register("sort/sort.js",["aurelia-fetch-client"],function(a,b){"use strict";function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d,e;return{setters:[function(a){d=a.HttpClient}],execute:function(){a("SortCustomElement",e=function(){function a(){c(this,a),this.open="${",this.users=[]}return a.prototype.bind=function(){var a=this,b=new d;return b.fetch("data.json").then(function(a){return a.json()}).then(function(b){return a.users=b.slice(1,10)})},a.prototype.nameLength=function(a){return a.name.length},a.prototype.dateSort=function(a,b,c){var d=new Date(a.registered),e=new Date(b.registered);return d===e?0:d>e?1*c:-1*c},a}()),a("SortCustomElement",e)}}});