"use strict";

System.register(["aurelia-fetch-client"], function (_export, _context) {
    "use strict";

    var HttpClient, FilterCustomElement;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    return {
        setters: [function (_aureliaFetchClient) {
            HttpClient = _aureliaFetchClient.HttpClient;
        }],
        execute: function () {
            _export("FilterCustomElement", FilterCustomElement = function () {
                function FilterCustomElement() {
                    _classCallCheck(this, FilterCustomElement);

                    this.open = "${";
                    this.selected = 'preview';
                    this.users = [];
                    this.eyeColors = [];
                    this.filters = [{ value: '', keys: ['name', 'address.state'] }, { value: '', keys: ['eyeColor'] }];
                }

                FilterCustomElement.prototype.bind = function bind() {
                    var _this = this;

                    var client = new HttpClient();

                    return client.fetch('data.json').then(function (response) {
                        return response.json();
                    }).then(function (users) {
                        return _this.users = users.slice(1, 10);
                    }).then(function () {
                        return _this.populateColors();
                    });
                };

                FilterCustomElement.prototype.populateColors = function populateColors() {
                    this.eyeColors.push('');
                    for (var _iterator = this.users, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var next = _ref;

                        var nextColor = next.eyeColor;

                        if (this.eyeColors.indexOf(nextColor) === -1) {
                            this.eyeColors.push(nextColor);
                        }
                    }
                };

                return FilterCustomElement;
            }());

            _export("FilterCustomElement", FilterCustomElement);
        }
    };
});
//# sourceMappingURL=filter.js.map
